{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Integrated Design Project V2.0 In the integrated design project (IDP) teams work in teams of 6 to develop an autonomous robotic system to solve a problem inspired by a real-world challenge. These will required the development of hardware, electronics and sensing and the accompanying control and software systems. Over 4 weeks teams develop a robot and at the end of the project there is a competition to assess the performance of the robots developed. The lab lasts for four weeks, with three weekly timetabled sessions: Thursday 9-11 Monday 11-1 Tuesday 9-11 (first week only!) Wednesday 9-11 The EIETL is open from 8am-5pm, and can be used during these times. The Dyson Centre is also available for use however there is only technician support (which limits when some equipment can be used) for limited periods. The laser cutter can be used from 8am-5pm, and the 3D printers likewise. If you require out-of-hours access to the Dyson Centre, you must fill in the relevant forms. It is expected per week you spend twice the scheduled time on this project. You must use your university card to sign in for the lab before the five past the hour official start of the project failure to do so will mean you are not marked as attending the lab. Even when not working in the EIETL you must head there first to sign in. A copy of the presentation give in the first lecture can be found here . The full timetable of events and deadlines is given below in the schedule and deadlines section. Aims & Objectives The key aim of the project is to develop an understanding of systems design and integration and also project management and team work skills to design and manufacture a system. In particular, this involves: developing an understanding for systems design and systems integration. appreciate the importance of co-ordinated teamwork and project management. apply and integrate the engineering principles taught in Part I. understand how to produce detailed design proposals. gain experience of building and testing a system once it has been designed. In this project, rapid-prototyping techniques are used which enables quick development, integration and testing of systems, allowing for multiple iterations of the system to be produced. Task and Team Allocation Each IDP cohort has a different task and rules set. A challenge set will be produced for each group, and the current (and existing challenges can be found here): Michaelmas 2018, M2 Task With the team allocations give here: Michaelmas 2018 Team Allocations If you have any questions about the task, please email Dave Patterson (dip26) and Josie Hughes (jaeh2). Project Management Team work is key to the success of this project. Teams should elect one team leader during the first session. This is an integrated design project. Therefore, the main key elements (mechanics, electronics and software) cannot be considered in isolation, and for successful integration teams members can not just be aware of one of these elements. However, it may be useful to loosely assign two team members to each of these areas, with the understanding that communication and inter-disciplinary work is required. Additionally, the project may require agile distribution of the work force, for example with a greater focus on mechanical first to get a chassis built to enable successful integration. There is a project management session at 2pm first thursday. Make sure you attend this session. Technologies & Approach In this project, electronics and manufacturing approaches will be use which allow for rapid manufacturing, allowing for design integration and early integration of the system. At the heart of the robot will be an Arduino Mega (or direct equivalent) Micro-Controller which can be programmed in C++. Interface electronics will be created on prototyping board or vero-board, with the Arduinos providing digital and analogue interfaces. The manufacturing techniques that will be use include: Laser Cutting MDF/Plywood 3D Printing These rapid manufacturing approaches will be augmented by using metal parts/cross section, and fastening methods including bolting and glueing. We will also make cardboard available for creating mock-ups of the mechanical systems. The Arduino software can be downloaded for free, and likewise a student edition of Creo/Fusion 360 CAD software can be downloaded from their website, alternatively Solidworks can be downloaded or USB sticks from the library can be borrowed to install the software. It may be useful to download and use this software on your personal computer. Resources Full resources including getting started guides and a list of parts can be found online on the resources page here . Assessment The assessment of the course has a number of different components. These are summarised below and the weighting and deadline given. Some assessment is performed at a group level, other at a sub-group level (e.g. for the electronics/software/mechanics) and the final report is assessed individually. The weeks of the deadline correspond to the weeks into the project: Assessment Weighting Deadline Initial Presentation (Group) 10% Week 1, Tuesday Initial Report (Group) 10% Week 2, Thursday Design Assessment (Sub-Group) 5% [2% if deadline missed] Week 2, Wednesday Functional Demonstration (Group) 5% [2% if deadline missed] Week 3, Wednesday Competition Performance (Group) 20% Week 4, Wednesday Final Presentation (Group) 20% Week 4, Wednesday Robot Quality (Sub-Team) 10% Week 4, Wednesday Final Report (Individual) 20% Week 5, Monday Detailed requirements and examples of the materials which must be submitted can be found here . Reports and presentations should be submitted online on the IDP Moodle Page, which can be found here. Schedule & Deadlines The following table summarises the key activities and deadlines at each session. The weeks refer to the number of week of the project - thus ifs you are doing the project in the second half of the term Week 1 will correspond to Week 5. Project Week Day Activity Deadline Week 1 Thursday 9:00: Introduction Session, EIETL Projector 14:00: Project Management Lecture Monday 11:30: Workshop Introduction (Teams 1-6), Dyson Centre 11:30: Software Introduction (All teams), LR3B 11:30: Electrical Introduction (All teams), EIETL Projector 12:00: Laser Cutter Introduction (Teams 1-4, 1 person per team), Dyson Centre 12:15: Workshop Introduction (Teams 7-12), Dyson Centre 14:00: CAD + Rapid Prototyping Introduction, Dyson Centre Tuesday First Presentation, find the timetable and room allocation here Wednesday 12:00: Laser Cutter Introduction (Teams 5-8, 1 person per team), Dyson Centre 14:00: Laser Cutter Introduction (Teams 9-12, Dyson Centre) Week 2 Thursday First Report Due Monday Feedback on 1st Report returned to teams Wednesday Deadline for Design Acceptance Week 3 Thursday System Integration Presentation. Quick 5 min update to present the integration progress/challenges Monday Wednesday Functional Demonstration Deadline Week 4 Thursday Monday Wednesday **The wednesday scheduled can be found here Week 5 Monday Final Report Deadline. Submit on Moodle. Laser cutting training sessions have been pre-booked, such that one person from each team is guarenteed a training session. If other team members wish to book other training sessions, the booking link can be found here . Feedback Suggestions for improvements in the organisation, structure of this project, choice of hardware and also the task, would be extremely welcome. If you have any suggestions during the course, please feel free to email Dave Patterson (dip26) or Josie Hughes (jaeh2), and we will do our best to make necessary changes. Please also feel free to use the fast feedback reporting mechanism. We will send out a feedback questionaire at the end of the course, we would appreciate all team members returning this promptly. Contact Should you have any questions or concerns during the project please in the first instance see a demonstrator who will be there at each lab session, the EIETL Technical Team, or email Dave Patterson (dip26) or Josie Hughes (jaeh2). This document can be found online at: https://jaehughes.github.io/IDPDocs/","title":"Home"},{"location":"#integrated-design-project-v20","text":"In the integrated design project (IDP) teams work in teams of 6 to develop an autonomous robotic system to solve a problem inspired by a real-world challenge. These will required the development of hardware, electronics and sensing and the accompanying control and software systems. Over 4 weeks teams develop a robot and at the end of the project there is a competition to assess the performance of the robots developed. The lab lasts for four weeks, with three weekly timetabled sessions: Thursday 9-11 Monday 11-1 Tuesday 9-11 (first week only!) Wednesday 9-11 The EIETL is open from 8am-5pm, and can be used during these times. The Dyson Centre is also available for use however there is only technician support (which limits when some equipment can be used) for limited periods. The laser cutter can be used from 8am-5pm, and the 3D printers likewise. If you require out-of-hours access to the Dyson Centre, you must fill in the relevant forms. It is expected per week you spend twice the scheduled time on this project. You must use your university card to sign in for the lab before the five past the hour official start of the project failure to do so will mean you are not marked as attending the lab. Even when not working in the EIETL you must head there first to sign in. A copy of the presentation give in the first lecture can be found here . The full timetable of events and deadlines is given below in the schedule and deadlines section.","title":"Integrated Design Project V2.0"},{"location":"#aims-objectives","text":"The key aim of the project is to develop an understanding of systems design and integration and also project management and team work skills to design and manufacture a system. In particular, this involves: developing an understanding for systems design and systems integration. appreciate the importance of co-ordinated teamwork and project management. apply and integrate the engineering principles taught in Part I. understand how to produce detailed design proposals. gain experience of building and testing a system once it has been designed. In this project, rapid-prototyping techniques are used which enables quick development, integration and testing of systems, allowing for multiple iterations of the system to be produced.","title":"Aims &amp; Objectives"},{"location":"#task-and-team-allocation","text":"Each IDP cohort has a different task and rules set. A challenge set will be produced for each group, and the current (and existing challenges can be found here): Michaelmas 2018, M2 Task With the team allocations give here: Michaelmas 2018 Team Allocations If you have any questions about the task, please email Dave Patterson (dip26) and Josie Hughes (jaeh2).","title":"Task and Team Allocation"},{"location":"#project-management","text":"Team work is key to the success of this project. Teams should elect one team leader during the first session. This is an integrated design project. Therefore, the main key elements (mechanics, electronics and software) cannot be considered in isolation, and for successful integration teams members can not just be aware of one of these elements. However, it may be useful to loosely assign two team members to each of these areas, with the understanding that communication and inter-disciplinary work is required. Additionally, the project may require agile distribution of the work force, for example with a greater focus on mechanical first to get a chassis built to enable successful integration. There is a project management session at 2pm first thursday. Make sure you attend this session.","title":"Project Management"},{"location":"#technologies-approach","text":"In this project, electronics and manufacturing approaches will be use which allow for rapid manufacturing, allowing for design integration and early integration of the system. At the heart of the robot will be an Arduino Mega (or direct equivalent) Micro-Controller which can be programmed in C++. Interface electronics will be created on prototyping board or vero-board, with the Arduinos providing digital and analogue interfaces. The manufacturing techniques that will be use include: Laser Cutting MDF/Plywood 3D Printing These rapid manufacturing approaches will be augmented by using metal parts/cross section, and fastening methods including bolting and glueing. We will also make cardboard available for creating mock-ups of the mechanical systems. The Arduino software can be downloaded for free, and likewise a student edition of Creo/Fusion 360 CAD software can be downloaded from their website, alternatively Solidworks can be downloaded or USB sticks from the library can be borrowed to install the software. It may be useful to download and use this software on your personal computer.","title":"Technologies &amp; Approach"},{"location":"#resources","text":"Full resources including getting started guides and a list of parts can be found online on the resources page here .","title":"Resources"},{"location":"#assessment","text":"The assessment of the course has a number of different components. These are summarised below and the weighting and deadline given. Some assessment is performed at a group level, other at a sub-group level (e.g. for the electronics/software/mechanics) and the final report is assessed individually. The weeks of the deadline correspond to the weeks into the project: Assessment Weighting Deadline Initial Presentation (Group) 10% Week 1, Tuesday Initial Report (Group) 10% Week 2, Thursday Design Assessment (Sub-Group) 5% [2% if deadline missed] Week 2, Wednesday Functional Demonstration (Group) 5% [2% if deadline missed] Week 3, Wednesday Competition Performance (Group) 20% Week 4, Wednesday Final Presentation (Group) 20% Week 4, Wednesday Robot Quality (Sub-Team) 10% Week 4, Wednesday Final Report (Individual) 20% Week 5, Monday Detailed requirements and examples of the materials which must be submitted can be found here . Reports and presentations should be submitted online on the IDP Moodle Page, which can be found here.","title":"Assessment"},{"location":"#schedule-deadlines","text":"The following table summarises the key activities and deadlines at each session. The weeks refer to the number of week of the project - thus ifs you are doing the project in the second half of the term Week 1 will correspond to Week 5. Project Week Day Activity Deadline Week 1 Thursday 9:00: Introduction Session, EIETL Projector 14:00: Project Management Lecture Monday 11:30: Workshop Introduction (Teams 1-6), Dyson Centre 11:30: Software Introduction (All teams), LR3B 11:30: Electrical Introduction (All teams), EIETL Projector 12:00: Laser Cutter Introduction (Teams 1-4, 1 person per team), Dyson Centre 12:15: Workshop Introduction (Teams 7-12), Dyson Centre 14:00: CAD + Rapid Prototyping Introduction, Dyson Centre Tuesday First Presentation, find the timetable and room allocation here Wednesday 12:00: Laser Cutter Introduction (Teams 5-8, 1 person per team), Dyson Centre 14:00: Laser Cutter Introduction (Teams 9-12, Dyson Centre) Week 2 Thursday First Report Due Monday Feedback on 1st Report returned to teams Wednesday Deadline for Design Acceptance Week 3 Thursday System Integration Presentation. Quick 5 min update to present the integration progress/challenges Monday Wednesday Functional Demonstration Deadline Week 4 Thursday Monday Wednesday **The wednesday scheduled can be found here Week 5 Monday Final Report Deadline. Submit on Moodle. Laser cutting training sessions have been pre-booked, such that one person from each team is guarenteed a training session. If other team members wish to book other training sessions, the booking link can be found here .","title":"Schedule &amp; Deadlines"},{"location":"#feedback","text":"Suggestions for improvements in the organisation, structure of this project, choice of hardware and also the task, would be extremely welcome. If you have any suggestions during the course, please feel free to email Dave Patterson (dip26) or Josie Hughes (jaeh2), and we will do our best to make necessary changes. Please also feel free to use the fast feedback reporting mechanism. We will send out a feedback questionaire at the end of the course, we would appreciate all team members returning this promptly.","title":"Feedback"},{"location":"#contact","text":"Should you have any questions or concerns during the project please in the first instance see a demonstrator who will be there at each lab session, the EIETL Technical Team, or email Dave Patterson (dip26) or Josie Hughes (jaeh2). This document can be found online at: https://jaehughes.github.io/IDPDocs/","title":"Contact"},{"location":"assesment/","text":"IDP: Assessment First Presentation First Presentation (presented as a group) The first presentation should be no longer than 10 minutes, to leave a further 5-10 minutes for discussions and questions. This should be thought of as a the team acting as a consultancy pitching your overall system to your clients. Each team member is expected to attend the presentation. This should include a maximum of 10 slides which should cover the following: Team Name and Management Structure Approach for solving the problem Robot Concept and diagram. This could be hand-drawn diagrams, CAD models or any format which conveys the approach and concept Overall System Level Diagram. Detailing how the electronics, hardware and software interacts Electronics/Sensing. This could include circuit diagrams/block diagrams as to the approach Exploration and navigation algorithms Integration between hardware electronics and software What is the most risky/challenging aspect of the project? Gantt Chart (resource/time allocation) Any cardboard models/diagrams this should be brought a long for discussion. A printed copy of the presentation should be brought to the presentation, and the presentation should also be submitted on Moodle. You will need, as a team, to think about how the individual contributions \ufb01t together and the overall timing, so as to ensure a professional impression. Where possible a projector/screen will be available. The meeting rooms have a HDMI connector, teams should check connection between laptops/screen prior to their presentation. A draft of the mark scheme for the First Presentation can be found here . First Report First Report (presented as a group) The initial report should provide a more detailed reflection of the planned system, and where possible reflect the feedback given the initial presentation. It should be a maximum of approximately 6 pages of text, with teams free to include diagrams/CAD diagrams/sketches which go beyond this 6 page text limit. The report focus on the same content as given in the First Presentation, with more in depth information. The report should contain: A coversheet specifying the team identi\ufb01er, team name and robot name together with the name, lab group and College of each team member Approach for solving the problem Sketches of the concepts you have considered (which may be photocopied/scanned from your lab book). Evaluation charts of these concepts together with a brief discussion of the advantages and disadvantages of each Approach for solving the problem Robot Concept and diagram. This could be hand-drawn diagrams, CAD models or any format which conveys the approach and concept Overall System Level Diagram. Detailing how the electronics, hardware and software interacts Electronics/Sensing. This should include a list of sensors/circuits required, any circuit diagrams/block diagrams which may have already been developed. Discussion as to if/why some processing will be performed in electronics opposed to software (e.g. obtaining digital outputs from analogue signals) Software. Exploration and navigation algorithms. Interface to electronics, discussion of choice of algorithmns, any failure detection/recovery which will be implemented. Integration between hardware electronics and software What is the most risky/challenging aspect of the project? Gantt Chart (resource/time allocation) The first report should be submitted online on Moodle, only one must be submitted per team. A draft of the mark scheme for the First Report can be found here . Design Acceptance Design acceptance is documentation that must be produced by teams, and is marked as pass/fail. Teams are free to test and develop hardware/software before they gain design acceptance, however, where possible no fully permanent manufacturing should be made before design acceptance. We encourage teams to get design acceptance as early as possible. These should be professional standard, well laid out diagrams. Take some care when making these to make them of a high quality. Consider how they are presented. They should be of a high enough quality to give to another engineering to enable them to make your robot systems. We ask for the final design acceptance to be printed out such that you have it to hand when working on your robots, but it may be useful to first ask for feedback on an electronic copy between printing all documents. Software/Overall Design Acceptance For software design acceptance we want to see an overall system diagram, to show how the entire system will integrate together. This will require input from all sub-teams. Additionally, we require details of the strategy/algorithms that will be used - this could be pictorial/flow-chart or another method of representing the overall approach and strategy. The DA document should be sufficiently detailed for a programmer to be able to finish the project for you (and perhaps not needing to consult the electrical subteam) - i.e. pins/ports defined, LEDs details specified, strategy described. Specifically we require: System Diagram. This should include the physical connections between the Arduino (including pin numbers) and the sensors, any serial connections between the Arduino and PC and information as to how mines detection will be shown (e.g. LEDs) and how the position will be identified. A drawing or photograph of a model of the robot should be included which has labels to show the key parts and how sensors/actuators are mounted. Make sure you have: Pin numbers of connections between Arduino and external electronics Details of information passing over serial Details of any processing performed on the PC Location of where the sensors are on the robot Code Structure & Algorithms. The overall strategy and algorithms which are used should be detailed, this could be showed in a diagram. This should such sufficient to convey your approach (i.e. around a maximum of 10 boxes and units, UML is not required). Additionally information about code structure should be given which includes: list of function prototypes, which source files the different functions will go into (showing code organisation/modularisation), where relevant any details of object types created. Include consideration of disaster recovery approaches. Make sure you have: List of different source files (including those running on a PC or on the microcontroller) List of key function prototypes within the different source files (details of any code organisation/modularisation) Details of any object types created (where relevant) In addition to this document the marker will review have all the code you have developed so far. It will be useful to have a sample of your current code (e.g. that developed in the initial testing stage) that could be looked over by a marker. Electrical Design Acceptance The following should be accepted before you solder onto the prototyping board. Circuit diagrams. Produce circuits to show all the electronics and the interface between the sensors and the Arduino. You should think about including indicator LEDs to show the output from the electronics so they can be tested without software, using variable resistors to set adjustable levels, include LEDs to indicate what has been detected and consider if there are any analogue inputs which would be better suited as a digital input. Pin numbers IC Part numbers (if you are use multiple ICs of the same type these should be labelled appropriately) Power lines (labelled) All parts (including ultrasound/compass should be included) Consider what is connected as a digital/analog input. If it is a digital input ensure it is a digital signal Layout diagrams. The layout and connections between any sensors and the Arduino must be shown. Stating with the layout of veroboard and the prototyping board either by hand, powerpoint or another drawing program the layout of where components will be placed should be shown. In particular you should think through: how to connect sensors/electronics fixed on the robot to the main control electronics to enable them to be separated, where connectors should be mounted (consider putting at the edge of the board such that they can be easily accessed). All connectors should be shown Power rails should be labelled Location of headers should be shown Location of all Parts Location where tracks should be cut Location of any jumper wires required These can be produced by hand or using CAD software, what matters is that they are clear and correct. Software such as LTSpice (which is installed on the department PCs) can be used, equally there are free online circuit drawing systems including circuit-diagram or circuitlab. Fritzing is another online tool (specifically for Arduinos etc. which allows creation of both circuit and layout diagrams and may be a useful tool. Examples and hints and tips on producing materials for electrical design acceptance can be found here Mechanical Design Acceptance For mechanical design acceptance, we want to. These should be sufficient for you to construct your robot, and to use the files to laser cut/3D print parts as required. We want to know what material you have to chosen to use and why as part of the submitted designs. Overall CAD Assembly. Showing the assembled CAD model. This should be as near as possible to actual design. If any changes are made to the mechanical parts by 'hand crafting' attempts should be made to make the CAD model reflect this, or notes should be added to the CAD model. The assembly should include any sensors mounts, electronics mounts and therefore must be developed in conjunction with the other sub-teams. Make sure you have a drawing with: Overall assembly showing the entire structure (including any mounts for sensors) 3D view and appropriate plan/side views Include balloon labels which identify each part 2D Drawing of parts/subsystems. 2D drawings of each of the parts should be developed. These should be sufficiently detailed such that if given to another person, they could build and assemble the system. These will also be useful for yourselves when constructing the robot. The parts should be laid out appropriately on the drawing and should include: Major dimensions (of folded and unfolded structures where applicable), indications if any threads should be applied to holes. Make sure you have a drawing with: Each part with dimensions Where applicable folded and unfolded views and dimension If tapping holes identify this If you want to include multiple parts per drawing, make sure they are appropriate to mix - don't mix 3D printing/laser cutting drawings Some examples of good/bad drawings can be found here . Functional Demonstration The aim of functional demonstration is to show that integration of the different sub-systems has been achieved and to encourage teams to perform early integration. They are to demonstrate that the core competencies required for the competition task can be achieved. This is to help evaluate the system, if, the robot fails to achieve as well as expected in competition. To get functional demonstration ask a demonstrator to asses your system. You have a maximum of 3 attempts to gain functional demonstration. Check and test your system before asking for Functional Demonstration. Functional Demonstration #1 (50%): Moving chassis that can navigate without crashing into walls. The robot must start in the start box, and then move out of the start box and around for 1 minute without getting stuck of crashing into walls. The robot should not have periods of not moving which are greater than 5 seconds. Functional Demonstration #2 (50%): Correct identification of the test object. The robot should start in the start box. A mine can be placed in a area of approximate choosing by the team. The robot should run autonomously and detect the type of mine and display this in a way which can be easily seen by the marker. Final Presentation & Competition The final presentation and competition will have the following format and order: 10 minute presentation (in the morning) Competition run (approximately 10 minutes) 5-10 minutes Q&A. Allows for reflections and discussion on the robots performance in the challenge. The final presentation (maximum of 8 slides) should focus on the following: Brief review of the overall design strategy (inc. software, electronics and hardware and overall strategy) Problems encountered during implementation and any major changes which were implemented Review of the program management of the project, and differences between planned timescales and actual timescales Key lessons learnt - what would you do differently if you do it again Brief statement of likely performance in the competition. A printed copy of the report should be brought to the presentation, and the presentation should also be submitted on Moodle. The Competition The competition will take place in the Wednesday afternoon. Teams should be on their allotted table and ready for their time slot - we recommend being on the table at least 10 minutes before their timed slot; the schedule is tight, there is very little room for delays. The scoring sheet which will be used for the M2 competition can be found here . There will be at least two official markers. Before the competition starts you must give a very brief (max 1 minute) introduction to state how you expect your robot to work. You should also make sure you have told the markers how the mines will be identified (i.e. where LEDs, and how the list of mines will be displayed). After the competition you must do the following: After the competition, you will move to the benches behind and will have a 5 minute de-brief and will discuss the robots performance: reasons for success/failure and any key lessons learnt. Take your robot to be photographed in the white robot area Make sure code is uploaded Final Report (Individual) The final report should be a maximum of 2-pages and should include the following: Team management aspects of the project \u2013 not a narrative describing how you did the work on a day to day basis. Major decisions made during the project should be reviewed and comment made on their correctness. discussion should be put in the context of the robot\u2019s performance in the competition and that of other different designs. Short discussion (1 paragraph) on the cost of producing the prototype and possible savings for a production run of 100 - 1000 units. (See the inside of the back cover for a personal time sheet and the IDP website for a spreadsheet to help analyse costs) The final report should be submitted on Moddle. Each student should submit their own report.","title":"Assessment"},{"location":"assesment/#idp-assessment","text":"","title":"IDP: Assessment"},{"location":"assesment/#first-presentation","text":"First Presentation (presented as a group) The first presentation should be no longer than 10 minutes, to leave a further 5-10 minutes for discussions and questions. This should be thought of as a the team acting as a consultancy pitching your overall system to your clients. Each team member is expected to attend the presentation. This should include a maximum of 10 slides which should cover the following: Team Name and Management Structure Approach for solving the problem Robot Concept and diagram. This could be hand-drawn diagrams, CAD models or any format which conveys the approach and concept Overall System Level Diagram. Detailing how the electronics, hardware and software interacts Electronics/Sensing. This could include circuit diagrams/block diagrams as to the approach Exploration and navigation algorithms Integration between hardware electronics and software What is the most risky/challenging aspect of the project? Gantt Chart (resource/time allocation) Any cardboard models/diagrams this should be brought a long for discussion. A printed copy of the presentation should be brought to the presentation, and the presentation should also be submitted on Moodle. You will need, as a team, to think about how the individual contributions \ufb01t together and the overall timing, so as to ensure a professional impression. Where possible a projector/screen will be available. The meeting rooms have a HDMI connector, teams should check connection between laptops/screen prior to their presentation. A draft of the mark scheme for the First Presentation can be found here .","title":"First Presentation"},{"location":"assesment/#first-report","text":"First Report (presented as a group) The initial report should provide a more detailed reflection of the planned system, and where possible reflect the feedback given the initial presentation. It should be a maximum of approximately 6 pages of text, with teams free to include diagrams/CAD diagrams/sketches which go beyond this 6 page text limit. The report focus on the same content as given in the First Presentation, with more in depth information. The report should contain: A coversheet specifying the team identi\ufb01er, team name and robot name together with the name, lab group and College of each team member Approach for solving the problem Sketches of the concepts you have considered (which may be photocopied/scanned from your lab book). Evaluation charts of these concepts together with a brief discussion of the advantages and disadvantages of each Approach for solving the problem Robot Concept and diagram. This could be hand-drawn diagrams, CAD models or any format which conveys the approach and concept Overall System Level Diagram. Detailing how the electronics, hardware and software interacts Electronics/Sensing. This should include a list of sensors/circuits required, any circuit diagrams/block diagrams which may have already been developed. Discussion as to if/why some processing will be performed in electronics opposed to software (e.g. obtaining digital outputs from analogue signals) Software. Exploration and navigation algorithms. Interface to electronics, discussion of choice of algorithmns, any failure detection/recovery which will be implemented. Integration between hardware electronics and software What is the most risky/challenging aspect of the project? Gantt Chart (resource/time allocation) The first report should be submitted online on Moodle, only one must be submitted per team. A draft of the mark scheme for the First Report can be found here .","title":"First Report"},{"location":"assesment/#design-acceptance","text":"Design acceptance is documentation that must be produced by teams, and is marked as pass/fail. Teams are free to test and develop hardware/software before they gain design acceptance, however, where possible no fully permanent manufacturing should be made before design acceptance. We encourage teams to get design acceptance as early as possible. These should be professional standard, well laid out diagrams. Take some care when making these to make them of a high quality. Consider how they are presented. They should be of a high enough quality to give to another engineering to enable them to make your robot systems. We ask for the final design acceptance to be printed out such that you have it to hand when working on your robots, but it may be useful to first ask for feedback on an electronic copy between printing all documents. Software/Overall Design Acceptance For software design acceptance we want to see an overall system diagram, to show how the entire system will integrate together. This will require input from all sub-teams. Additionally, we require details of the strategy/algorithms that will be used - this could be pictorial/flow-chart or another method of representing the overall approach and strategy. The DA document should be sufficiently detailed for a programmer to be able to finish the project for you (and perhaps not needing to consult the electrical subteam) - i.e. pins/ports defined, LEDs details specified, strategy described. Specifically we require: System Diagram. This should include the physical connections between the Arduino (including pin numbers) and the sensors, any serial connections between the Arduino and PC and information as to how mines detection will be shown (e.g. LEDs) and how the position will be identified. A drawing or photograph of a model of the robot should be included which has labels to show the key parts and how sensors/actuators are mounted. Make sure you have: Pin numbers of connections between Arduino and external electronics Details of information passing over serial Details of any processing performed on the PC Location of where the sensors are on the robot Code Structure & Algorithms. The overall strategy and algorithms which are used should be detailed, this could be showed in a diagram. This should such sufficient to convey your approach (i.e. around a maximum of 10 boxes and units, UML is not required). Additionally information about code structure should be given which includes: list of function prototypes, which source files the different functions will go into (showing code organisation/modularisation), where relevant any details of object types created. Include consideration of disaster recovery approaches. Make sure you have: List of different source files (including those running on a PC or on the microcontroller) List of key function prototypes within the different source files (details of any code organisation/modularisation) Details of any object types created (where relevant) In addition to this document the marker will review have all the code you have developed so far. It will be useful to have a sample of your current code (e.g. that developed in the initial testing stage) that could be looked over by a marker. Electrical Design Acceptance The following should be accepted before you solder onto the prototyping board. Circuit diagrams. Produce circuits to show all the electronics and the interface between the sensors and the Arduino. You should think about including indicator LEDs to show the output from the electronics so they can be tested without software, using variable resistors to set adjustable levels, include LEDs to indicate what has been detected and consider if there are any analogue inputs which would be better suited as a digital input. Pin numbers IC Part numbers (if you are use multiple ICs of the same type these should be labelled appropriately) Power lines (labelled) All parts (including ultrasound/compass should be included) Consider what is connected as a digital/analog input. If it is a digital input ensure it is a digital signal Layout diagrams. The layout and connections between any sensors and the Arduino must be shown. Stating with the layout of veroboard and the prototyping board either by hand, powerpoint or another drawing program the layout of where components will be placed should be shown. In particular you should think through: how to connect sensors/electronics fixed on the robot to the main control electronics to enable them to be separated, where connectors should be mounted (consider putting at the edge of the board such that they can be easily accessed). All connectors should be shown Power rails should be labelled Location of headers should be shown Location of all Parts Location where tracks should be cut Location of any jumper wires required These can be produced by hand or using CAD software, what matters is that they are clear and correct. Software such as LTSpice (which is installed on the department PCs) can be used, equally there are free online circuit drawing systems including circuit-diagram or circuitlab. Fritzing is another online tool (specifically for Arduinos etc. which allows creation of both circuit and layout diagrams and may be a useful tool. Examples and hints and tips on producing materials for electrical design acceptance can be found here Mechanical Design Acceptance For mechanical design acceptance, we want to. These should be sufficient for you to construct your robot, and to use the files to laser cut/3D print parts as required. We want to know what material you have to chosen to use and why as part of the submitted designs. Overall CAD Assembly. Showing the assembled CAD model. This should be as near as possible to actual design. If any changes are made to the mechanical parts by 'hand crafting' attempts should be made to make the CAD model reflect this, or notes should be added to the CAD model. The assembly should include any sensors mounts, electronics mounts and therefore must be developed in conjunction with the other sub-teams. Make sure you have a drawing with: Overall assembly showing the entire structure (including any mounts for sensors) 3D view and appropriate plan/side views Include balloon labels which identify each part 2D Drawing of parts/subsystems. 2D drawings of each of the parts should be developed. These should be sufficiently detailed such that if given to another person, they could build and assemble the system. These will also be useful for yourselves when constructing the robot. The parts should be laid out appropriately on the drawing and should include: Major dimensions (of folded and unfolded structures where applicable), indications if any threads should be applied to holes. Make sure you have a drawing with: Each part with dimensions Where applicable folded and unfolded views and dimension If tapping holes identify this If you want to include multiple parts per drawing, make sure they are appropriate to mix - don't mix 3D printing/laser cutting drawings Some examples of good/bad drawings can be found here .","title":"Design Acceptance"},{"location":"assesment/#functional-demonstration","text":"The aim of functional demonstration is to show that integration of the different sub-systems has been achieved and to encourage teams to perform early integration. They are to demonstrate that the core competencies required for the competition task can be achieved. This is to help evaluate the system, if, the robot fails to achieve as well as expected in competition. To get functional demonstration ask a demonstrator to asses your system. You have a maximum of 3 attempts to gain functional demonstration. Check and test your system before asking for Functional Demonstration. Functional Demonstration #1 (50%): Moving chassis that can navigate without crashing into walls. The robot must start in the start box, and then move out of the start box and around for 1 minute without getting stuck of crashing into walls. The robot should not have periods of not moving which are greater than 5 seconds. Functional Demonstration #2 (50%): Correct identification of the test object. The robot should start in the start box. A mine can be placed in a area of approximate choosing by the team. The robot should run autonomously and detect the type of mine and display this in a way which can be easily seen by the marker.","title":"Functional Demonstration"},{"location":"assesment/#final-presentation-competition","text":"The final presentation and competition will have the following format and order: 10 minute presentation (in the morning) Competition run (approximately 10 minutes) 5-10 minutes Q&A. Allows for reflections and discussion on the robots performance in the challenge. The final presentation (maximum of 8 slides) should focus on the following: Brief review of the overall design strategy (inc. software, electronics and hardware and overall strategy) Problems encountered during implementation and any major changes which were implemented Review of the program management of the project, and differences between planned timescales and actual timescales Key lessons learnt - what would you do differently if you do it again Brief statement of likely performance in the competition. A printed copy of the report should be brought to the presentation, and the presentation should also be submitted on Moodle. The Competition The competition will take place in the Wednesday afternoon. Teams should be on their allotted table and ready for their time slot - we recommend being on the table at least 10 minutes before their timed slot; the schedule is tight, there is very little room for delays. The scoring sheet which will be used for the M2 competition can be found here . There will be at least two official markers. Before the competition starts you must give a very brief (max 1 minute) introduction to state how you expect your robot to work. You should also make sure you have told the markers how the mines will be identified (i.e. where LEDs, and how the list of mines will be displayed). After the competition you must do the following: After the competition, you will move to the benches behind and will have a 5 minute de-brief and will discuss the robots performance: reasons for success/failure and any key lessons learnt. Take your robot to be photographed in the white robot area Make sure code is uploaded","title":"Final Presentation &amp; Competition"},{"location":"assesment/#final-report-individual","text":"The final report should be a maximum of 2-pages and should include the following: Team management aspects of the project \u2013 not a narrative describing how you did the work on a day to day basis. Major decisions made during the project should be reviewed and comment made on their correctness. discussion should be put in the context of the robot\u2019s performance in the competition and that of other different designs. Short discussion (1 paragraph) on the cost of producing the prototype and possible savings for a production run of 100 - 1000 units. (See the inside of the back cover for a personal time sheet and the IDP website for a spreadsheet to help analyse costs) The final report should be submitted on Moddle. Each student should submit their own report.","title":"Final Report (Individual)"},{"location":"parts/","text":"IDP: Parts Lists The following is a summary of the key parts used in IDP. For a fully comprehensive list, please vist the Moodle site. Platform In this project, we will be used an Arduino (or OrangePip) as the micro-controller. The Arduino is a low-cost microcontroller which is programmed in C++ via USB and has digital inputs/outputs, analogue inputs and PWM sockets. This allows for different sensors/output devices to be controlled. The mechanical system will be developed using laser cutting, 3D printing and other rapid fabrication methods. Microcontroller & Drivers: OrangePip ( Arduino replica) (x2 per team) Arduino Motor Shield Prototyping Shield Veroboard + Connectors Breadboard for prototyping Sensors/Input Devices Compass/Accelerometer [ datasheet and useful guide ] IR Sensors (Line following sensors)[ datasheet ] IR (analog) Distance Sensor [datasheet] Ultrasound Distance Sensor [ datasheet ] Phototransistor [datasheet] LDR [datasheet] Microswitches [datasheet] IR Diodes & LEDs Other: Mains to 9V Power Supply (with split ends to power Arduino + Motor Controller) USB Lead x 2 A bank of electronic components which can be used for developing signal conditioning is provided. A list to all other components available can be found on the IDP Moodle site. Mechanical Components: Transmission Components (available from the EIETL) Wheels, soft rubber tyre, 100mm Wheels, soft rubber tyre, 75 dia Castors, soft rubber tyre, 50 dia Ball Bearings castors Large Motor/Gearbox 12v DC, 20rpm & 40rpm [ datasheet ] Small motor/gearbox 12v DC, 18rpm & 40rpm Micro-Servo [ datasheet ] A maximum of 4 motors and 2 servos may be used per team, this is a maximum not a goal! Structural Materials (available in the workshop) Mild steel sheet, 22swg (450\u00d7450 max) 1 Note: swg to mm conversions Aluminium sheet, 1.5mm (200\u00d7150 max) 1 (swg = standard wire gauge) Aluminium tube, 19 dia, 1mm wall, 150 long 1 24swg = 0.6mm Aluminium rod, 8 dia, 150 long 1 22swg = 0.7mm Aluminium angle, 12.5\u00d712.5\u00d71.6 (600 max) 1 21swg = 0.8mm Mild steel tube (5/16 od \u00d7 21swg) 300 long 1 18swg = 1.2mm Mild steel tube (3/8 od \u00d7 22swg ) 300 long 1 16swg = 1.6mm Polypropylene sheet 300\u00d7150\u00d71.5 1 Mild steel rod 4 dia 300 long, Mild steel rod 6 dia 300 long, Brass rod 6 dia 100 long, Brass hex 6 AF 100 long Bearings, Gears and Sprockets (available from the EIETL) Spur Gears (exact dimensions to be confirmed) Bevel Gears Rack Gears Worm Gears Compression Springs (in a variety of sizes) Extension Springs (in a variety of sizes) Deep Grove Bearings Flange Bushings V Pulley Toothed Pulley See the EIETL screen with the various parts for specific details about the bearings, gears and sprockets Fasteners and other materials (available in the workshop) M2.5/M3/M4/M5/M6 nuts & washers M2.5 \u00d7 12 Socket head Cap Screws (motor mounts) M3/M4/M6 studding M3 \u00d7 4, 10, 16, 20 Socket Head Cap Screws Pop rivets M4 \u00d7 10, 16, 20, 25 Socket Head Cap Screws M5 \u00d7 16, 20, 25 Socket Head Cap Screws M6 \u00d7 16, 25, 40 Socket Head Cap Screws No4x25mm Round Head Screws No4x25mm Countersunk Screws 12.5mm Panel Pins 16mm Panel Pins 19mm Panel Pins Lubricants Adhesives (Hot glue, Rapid araldite, White wood glue) Everbuild Superglue HV (EIETL) Adhesive Foam (EIETL) Rapid Prototyping Materials (available from Dyson Centre Technicians ) Each team has access to 2 sheets (300mmx600mm) of the following material. If you want more, that if fine (within reason), however you must ask a technician/demonstrator. MDF (3mm, 4mm, 6mm) for laser cutting PlyWood (3mm, 4mm, 6mm for laser cutting PLA for 3D printing Cardboard for testing is availiable in the Dyson Centre Scraps of these materials for testing can also be found in the laser cutter area","title":"Parts Lists"},{"location":"parts/#idp-parts-lists","text":"The following is a summary of the key parts used in IDP. For a fully comprehensive list, please vist the Moodle site.","title":"IDP: Parts Lists"},{"location":"parts/#platform","text":"In this project, we will be used an Arduino (or OrangePip) as the micro-controller. The Arduino is a low-cost microcontroller which is programmed in C++ via USB and has digital inputs/outputs, analogue inputs and PWM sockets. This allows for different sensors/output devices to be controlled. The mechanical system will be developed using laser cutting, 3D printing and other rapid fabrication methods.","title":"Platform"},{"location":"parts/#microcontroller-drivers","text":"OrangePip ( Arduino replica) (x2 per team) Arduino Motor Shield Prototyping Shield Veroboard + Connectors Breadboard for prototyping","title":"Microcontroller &amp; Drivers:"},{"location":"parts/#sensorsinput-devices","text":"Compass/Accelerometer [ datasheet and useful guide ] IR Sensors (Line following sensors)[ datasheet ] IR (analog) Distance Sensor [datasheet] Ultrasound Distance Sensor [ datasheet ] Phototransistor [datasheet] LDR [datasheet] Microswitches [datasheet] IR Diodes & LEDs Other: Mains to 9V Power Supply (with split ends to power Arduino + Motor Controller) USB Lead x 2 A bank of electronic components which can be used for developing signal conditioning is provided. A list to all other components available can be found on the IDP Moodle site.","title":"Sensors/Input Devices"},{"location":"parts/#mechanical-components","text":"Transmission Components (available from the EIETL) Wheels, soft rubber tyre, 100mm Wheels, soft rubber tyre, 75 dia Castors, soft rubber tyre, 50 dia Ball Bearings castors Large Motor/Gearbox 12v DC, 20rpm & 40rpm [ datasheet ] Small motor/gearbox 12v DC, 18rpm & 40rpm Micro-Servo [ datasheet ] A maximum of 4 motors and 2 servos may be used per team, this is a maximum not a goal! Structural Materials (available in the workshop) Mild steel sheet, 22swg (450\u00d7450 max) 1 Note: swg to mm conversions Aluminium sheet, 1.5mm (200\u00d7150 max) 1 (swg = standard wire gauge) Aluminium tube, 19 dia, 1mm wall, 150 long 1 24swg = 0.6mm Aluminium rod, 8 dia, 150 long 1 22swg = 0.7mm Aluminium angle, 12.5\u00d712.5\u00d71.6 (600 max) 1 21swg = 0.8mm Mild steel tube (5/16 od \u00d7 21swg) 300 long 1 18swg = 1.2mm Mild steel tube (3/8 od \u00d7 22swg ) 300 long 1 16swg = 1.6mm Polypropylene sheet 300\u00d7150\u00d71.5 1 Mild steel rod 4 dia 300 long, Mild steel rod 6 dia 300 long, Brass rod 6 dia 100 long, Brass hex 6 AF 100 long Bearings, Gears and Sprockets (available from the EIETL) Spur Gears (exact dimensions to be confirmed) Bevel Gears Rack Gears Worm Gears Compression Springs (in a variety of sizes) Extension Springs (in a variety of sizes) Deep Grove Bearings Flange Bushings V Pulley Toothed Pulley See the EIETL screen with the various parts for specific details about the bearings, gears and sprockets Fasteners and other materials (available in the workshop) M2.5/M3/M4/M5/M6 nuts & washers M2.5 \u00d7 12 Socket head Cap Screws (motor mounts) M3/M4/M6 studding M3 \u00d7 4, 10, 16, 20 Socket Head Cap Screws Pop rivets M4 \u00d7 10, 16, 20, 25 Socket Head Cap Screws M5 \u00d7 16, 20, 25 Socket Head Cap Screws M6 \u00d7 16, 25, 40 Socket Head Cap Screws No4x25mm Round Head Screws No4x25mm Countersunk Screws 12.5mm Panel Pins 16mm Panel Pins 19mm Panel Pins Lubricants Adhesives (Hot glue, Rapid araldite, White wood glue) Everbuild Superglue HV (EIETL) Adhesive Foam (EIETL) Rapid Prototyping Materials (available from Dyson Centre Technicians ) Each team has access to 2 sheets (300mmx600mm) of the following material. If you want more, that if fine (within reason), however you must ask a technician/demonstrator. MDF (3mm, 4mm, 6mm) for laser cutting PlyWood (3mm, 4mm, 6mm for laser cutting PLA for 3D printing Cardboard for testing is availiable in the Dyson Centre Scraps of these materials for testing can also be found in the laser cutter area","title":"Mechanical Components:"},{"location":"resources/","text":"IDP: Resources Note: In this lab we are using OrangePip which are a direct replica of the Arduino and is fully compliant with the Arduino IDE. More specifically we are using the Orangepip Mega2560 which is a direct equivalent of the Arduino Mega2560, thus any information/tutorials for either of these are relevant. Electronics: Getting Started We suggest you take a little bit of time familiarising yourself with the microcontroller and reading from sensors and setting outputs. This will enable you to understand how it is possible to interface with sensors using a microcontroller and how the sensor circuitry should be built. There is some cross over between this and the software groups, however, 2 Arduino have been provided per team to allow you to both work on this. The Arduino IDE software is installed on the teaching system (and can be found on the PCs in the EIETL), or can be used online, or can be downloaded (for free) on to your personal computer. First, familiarise yourself with the board and the different pins. Read through this page to understand the different inputs types and how the board works. Although this if for an smaller Arduino Uno, the same information holds for the Mega. The specific pin out for the Arduino is given here: Familiarisation with the Arduino Follow this tutorial to using an programming an Arduino Mega. If you a using a PC which is running the Arduino IDE for the first time, you may need to install the driver software which can be found here . Make sure you can run the 'blinky LED' script and your LED on your board blinks. Connect an LED to the Arduino Using your breadboard, now wire up an LED to another digital input on your Arduino, as shown in the figure below. You can use jumpers to connect to the Arduino and to the LED; make sure you connect the LED the correct way around and use a current limiting resistor (assuming the max forward current of the LED is around 20-30mA). For more information on how to pick this resistor, read this page . Change the program written in the previous task to write to the new digital input with the LED is attached to. Make the LED turn on/off. Read from the Analogue Input Connect the LDR on breadboard with another resistor to form a potential divider as shown. Connect the middle of this potential divider to the analogue Input. To choose the correct resistor, a multi-meter should be used to measure the average resistance of the LDR, and a matched fixed resistor can be used to achieve the largest range of output voltage. Build the circuit and check with a multimeter that the voltage in the middle of the LDR circuit changes as expected. We can now using the following to read from the analog input and then print to the to the serial monitor. The serial monitor can help for debugging. Check that the sensor values change when the LDR is covered. int sensorPin = A0; // select the input pin for the potentiometer int sensorValue = 0; // variable to store the value coming from the sensor void setup() { Serial.begin(9600); //Start serial and set the correct Baud Rate } void loop() { sensorValue = analogRead(sensorPin); Serial.println(sensorValue); } Wire-up motor controllers Using the documentation and tutorials and examples sketches for the motor-shield, wire up the motors and check that you can control the direction. Passed the wired up motor-shield (with appropiate information) over to your software team. Make a color sensor Reflectance can be used to measure the colour of an object nearby. By shining an LED, and measuring the reflectance of the output using an LDR, the analogue reading can provide an indication of the color as the absorbance of the light will vary with the colour of the material. Using the approaches in the previous tasks (controlling an LED and reading from an LDR) make a colour sensor which uses reflectance. You may need to adjust the resistor in the potential divider to maximise the sensitivity. Color filters an be added to the LDR to detect specific colors. A similar approach can be made by using an IR diode + photodetector. You could consider using an op-amp to make a comparitor to convert this analogue input into a digital input Read from an I2C device I2C is a popular method of interfacing with sensors or devices. This is a digital protocol, which allows multiple devices to be connected over only two data lines making it highly efficient and scale-able. Information about I2C and how I2C can be interfaced using Arduino is described here . Understanding the prototyping shield & Vero Board To design your can first use breadboard to test, after which you can transfer them over to the prototyping board which is provided and forms a 'shield' above the microcontroller. Additional circuits can be added by using strip board, which can then be connected by using additional headers. This is an excellent tutorial on how to use strip board and how to design circuits when using strip board! Well worth a read! Designing your electronics and sensing: Hints & Tips Things to consider when designing your electronics: Do you need a switch/interface to start your robot/reset? Add indicator LEDs to electronics to identify if the circuits are working without requiring software to run. Talk with mechanics/software, how are you going to mount your sensors and does this influence the design you may require? If you want to tune sensititivites (for example potential dividers or inputs to compartors/amplifyers) consider using a variable resistor. Should sensors give you a digital/analogue input? Can you convert to a digital input to reduce the load on the software team? How can you connect external flying leads/parts attached to the robot to the electronics? Make sure you look at the assessment page to see what is required for Design Acceptance and what must be achieved by when. This gives some additional advice on how to draw/design circuits. Practical Advice Soldering Advice. [video] Software: Getting Started To start with, you should gain familiarity with the Arduino and software and achieve the basics: writing to Serial, control of motors and reading from sensors. The following provide details and examples of Arduino programming. In particular, the first document should be studied in depth and referred to as necessary: Arduino Programming Manual . A cheat sheet of the key C++ commands . The next exercises provide some introduction to programming using the Arduino: Familiarisation with the Arduino Follow this tutorial to using an programming an Arduino Mega. If you a using a PC which is running the Arduino IDE for the first time, you may need to install the driver software which can be found here . Make sure you can run the 'blinky LED' script and your LED on your board blinks. The general structure of Arduino files is as followed: //Any libraries to be included go here //Any global variables go in here // Any function prototypes go here void setup() { // Any setup initalisation goes in here } void loop(){ //This is the main part of the program, and this is looped continously until the reset button is pressed. } //Any custom functions go here Writing over Serial Used for communication between the Arduino board and a computer or other devices. All Arduino boards have at least one serial port (also known as a UART or USART): Serial. It communicates on digital pins 0 (RX) and 1 (TX) as well as with the computer via USB. Thus, if you use these functions, you cannot also use pins 0 and 1 for digital input or output. You can use the Arduino environment\u2019s built-in serial monitor to communicate with an Arduino board. Click the serial monitor button in the toolbar and select the same baud rate used in the call to begin(). This is very useful for debugging. It is necessary to setup the serial communication in the setup: void setup() { Serial.begin(9600); //Start serial and set the correct Baud Rate } After this, it is then possible to 'print' data over the serial link in various different manners: Serial.print(\"Hello World\") //Sends Serial String with no end of line characters Serial.println(\"Hello World\") //Sends Serial String with end of line characters It is also possible to perform string handling to print a mix of text and varibles: int sensorValue = analogRead(A0); String stringOne = \"Sensor value: \"; String stringThree = stringOne + sensorValue; Serial.println(stringThree); Make sure you can print text and variables over the serial. It is also possible to read serial data and perform parsing over the incomming string. More information on serial handling can be found here . Digital I/O Ports The Arduino has many I/O ports which can act as both inputs or output, depending on how they are configured. To use a digital pin as an output, it must be configured as such and then can be controlled by using a digital write: void setup() { pinMode(13, OUTPUT); // sets the digital pin 13 as output } void loop() { digitalWrite(13, HIGH); // sets the digital pin 13 on delay(1000); // waits for a second digitalWrite(13, LOW); // sets the digital pin 13 off delay(1000); // waits for a second } Use a digital output to control a LED. To configure and use a digital input, the pin must be configured as such: int ledPin = 13; // LED connected to digital pin 13 int inPin = 7; // pushbutton connected to digital pin 7 int val = 0; // variable to store the read value void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin 13 as output } void loop() { val = digitalRead(inPin); // read the input pin } Adapt the following to write the digital read value over serial, and then use a jumper lead to change the input from 5V to GND to simulate a digital input. Read from Analogue Port Connect an analogue input to an analogue input, for example a variable resistor could be connected using jumper wires as shown here: The analogue value can then be obtained. Investigate averaging/filtering the result to reduce any noise. sensorPin =A0 int sensorValue = 0; // variable to store the value coming from the sensor void setup() { Serial.begin(9600); } void loop() { sensorValue = analogRead(sensorPin); Serial.println(sensorValue); } Motor Control Once your electrical team are satisfied that they have correctly wired up the motor controller, you can start programming the motor controls. You will need to find out from your electrical/mechanical teams which motor port corresponds to which motor. Using the documentation and tutorials you can control the motors. In particular look at the section at 'DC Motors' and install the relevant libraries. You can investigate the correct motor speeds to be used. You could consider writing functions to accelerate/deaccelerate up to a given speed. Develop functions for motor control which may come in useful - for example turning. Communicate with your mechanical team as how the robot should best turn, what are the intended motor actions for turning? Interfacing to Python If you would like to do some more complicated progressing on the Arduino, for example where the Arduino is acting as slave device to a computer acting as a master, serial communication between the microcontroller and a PC can be used. Python can then be used to read/write serial commands, communicating with the Arduino, while allowing more complex processing to be performed offline. Information about how to interface between an Arduino and a PC using Python can be found here: Provides introduction to interfacing to an Arduino using Python Provides some alternative methods of using Python to interface with an Arduino Things to consider when developing your software: Do you need a switch/interface to start your robot/reset? How will you interface to the electronics? What processing should be performed in electronics/software? This is a question for both the electrical and software team. How can you test the software? Mechanics: Getting Started The introduction mechanical presentation can be found here . Advice on CAD for laser cutting Department Rapid Prototyping Facilities Information on the rapid prototyping facilities available in the department can be found here: Laser Cutting 3D Printing Plasma Cutter The laser cutter may be busy - there are training sessions daily at 12-13 and 14-15; these times should be avoided. The laser cutter should only not be used out of hours and particular care should be taken when cardboard is cut, as this is easily flammable. Things to consider when developing your software: * What pins/how will you be interfacing with the electronics sensors?","title":"Resources"},{"location":"resources/#idp-resources","text":"Note: In this lab we are using OrangePip which are a direct replica of the Arduino and is fully compliant with the Arduino IDE. More specifically we are using the Orangepip Mega2560 which is a direct equivalent of the Arduino Mega2560, thus any information/tutorials for either of these are relevant.","title":"IDP: Resources"},{"location":"resources/#electronics-getting-started","text":"We suggest you take a little bit of time familiarising yourself with the microcontroller and reading from sensors and setting outputs. This will enable you to understand how it is possible to interface with sensors using a microcontroller and how the sensor circuitry should be built. There is some cross over between this and the software groups, however, 2 Arduino have been provided per team to allow you to both work on this. The Arduino IDE software is installed on the teaching system (and can be found on the PCs in the EIETL), or can be used online, or can be downloaded (for free) on to your personal computer. First, familiarise yourself with the board and the different pins. Read through this page to understand the different inputs types and how the board works. Although this if for an smaller Arduino Uno, the same information holds for the Mega. The specific pin out for the Arduino is given here: Familiarisation with the Arduino Follow this tutorial to using an programming an Arduino Mega. If you a using a PC which is running the Arduino IDE for the first time, you may need to install the driver software which can be found here . Make sure you can run the 'blinky LED' script and your LED on your board blinks. Connect an LED to the Arduino Using your breadboard, now wire up an LED to another digital input on your Arduino, as shown in the figure below. You can use jumpers to connect to the Arduino and to the LED; make sure you connect the LED the correct way around and use a current limiting resistor (assuming the max forward current of the LED is around 20-30mA). For more information on how to pick this resistor, read this page . Change the program written in the previous task to write to the new digital input with the LED is attached to. Make the LED turn on/off. Read from the Analogue Input Connect the LDR on breadboard with another resistor to form a potential divider as shown. Connect the middle of this potential divider to the analogue Input. To choose the correct resistor, a multi-meter should be used to measure the average resistance of the LDR, and a matched fixed resistor can be used to achieve the largest range of output voltage. Build the circuit and check with a multimeter that the voltage in the middle of the LDR circuit changes as expected. We can now using the following to read from the analog input and then print to the to the serial monitor. The serial monitor can help for debugging. Check that the sensor values change when the LDR is covered. int sensorPin = A0; // select the input pin for the potentiometer int sensorValue = 0; // variable to store the value coming from the sensor void setup() { Serial.begin(9600); //Start serial and set the correct Baud Rate } void loop() { sensorValue = analogRead(sensorPin); Serial.println(sensorValue); } Wire-up motor controllers Using the documentation and tutorials and examples sketches for the motor-shield, wire up the motors and check that you can control the direction. Passed the wired up motor-shield (with appropiate information) over to your software team. Make a color sensor Reflectance can be used to measure the colour of an object nearby. By shining an LED, and measuring the reflectance of the output using an LDR, the analogue reading can provide an indication of the color as the absorbance of the light will vary with the colour of the material. Using the approaches in the previous tasks (controlling an LED and reading from an LDR) make a colour sensor which uses reflectance. You may need to adjust the resistor in the potential divider to maximise the sensitivity. Color filters an be added to the LDR to detect specific colors. A similar approach can be made by using an IR diode + photodetector. You could consider using an op-amp to make a comparitor to convert this analogue input into a digital input Read from an I2C device I2C is a popular method of interfacing with sensors or devices. This is a digital protocol, which allows multiple devices to be connected over only two data lines making it highly efficient and scale-able. Information about I2C and how I2C can be interfaced using Arduino is described here . Understanding the prototyping shield & Vero Board To design your can first use breadboard to test, after which you can transfer them over to the prototyping board which is provided and forms a 'shield' above the microcontroller. Additional circuits can be added by using strip board, which can then be connected by using additional headers. This is an excellent tutorial on how to use strip board and how to design circuits when using strip board! Well worth a read! Designing your electronics and sensing: Hints & Tips Things to consider when designing your electronics: Do you need a switch/interface to start your robot/reset? Add indicator LEDs to electronics to identify if the circuits are working without requiring software to run. Talk with mechanics/software, how are you going to mount your sensors and does this influence the design you may require? If you want to tune sensititivites (for example potential dividers or inputs to compartors/amplifyers) consider using a variable resistor. Should sensors give you a digital/analogue input? Can you convert to a digital input to reduce the load on the software team? How can you connect external flying leads/parts attached to the robot to the electronics? Make sure you look at the assessment page to see what is required for Design Acceptance and what must be achieved by when. This gives some additional advice on how to draw/design circuits. Practical Advice Soldering Advice. [video]","title":"Electronics: Getting Started"},{"location":"resources/#software-getting-started","text":"To start with, you should gain familiarity with the Arduino and software and achieve the basics: writing to Serial, control of motors and reading from sensors. The following provide details and examples of Arduino programming. In particular, the first document should be studied in depth and referred to as necessary: Arduino Programming Manual . A cheat sheet of the key C++ commands . The next exercises provide some introduction to programming using the Arduino: Familiarisation with the Arduino Follow this tutorial to using an programming an Arduino Mega. If you a using a PC which is running the Arduino IDE for the first time, you may need to install the driver software which can be found here . Make sure you can run the 'blinky LED' script and your LED on your board blinks. The general structure of Arduino files is as followed: //Any libraries to be included go here //Any global variables go in here // Any function prototypes go here void setup() { // Any setup initalisation goes in here } void loop(){ //This is the main part of the program, and this is looped continously until the reset button is pressed. } //Any custom functions go here Writing over Serial Used for communication between the Arduino board and a computer or other devices. All Arduino boards have at least one serial port (also known as a UART or USART): Serial. It communicates on digital pins 0 (RX) and 1 (TX) as well as with the computer via USB. Thus, if you use these functions, you cannot also use pins 0 and 1 for digital input or output. You can use the Arduino environment\u2019s built-in serial monitor to communicate with an Arduino board. Click the serial monitor button in the toolbar and select the same baud rate used in the call to begin(). This is very useful for debugging. It is necessary to setup the serial communication in the setup: void setup() { Serial.begin(9600); //Start serial and set the correct Baud Rate } After this, it is then possible to 'print' data over the serial link in various different manners: Serial.print(\"Hello World\") //Sends Serial String with no end of line characters Serial.println(\"Hello World\") //Sends Serial String with end of line characters It is also possible to perform string handling to print a mix of text and varibles: int sensorValue = analogRead(A0); String stringOne = \"Sensor value: \"; String stringThree = stringOne + sensorValue; Serial.println(stringThree); Make sure you can print text and variables over the serial. It is also possible to read serial data and perform parsing over the incomming string. More information on serial handling can be found here . Digital I/O Ports The Arduino has many I/O ports which can act as both inputs or output, depending on how they are configured. To use a digital pin as an output, it must be configured as such and then can be controlled by using a digital write: void setup() { pinMode(13, OUTPUT); // sets the digital pin 13 as output } void loop() { digitalWrite(13, HIGH); // sets the digital pin 13 on delay(1000); // waits for a second digitalWrite(13, LOW); // sets the digital pin 13 off delay(1000); // waits for a second } Use a digital output to control a LED. To configure and use a digital input, the pin must be configured as such: int ledPin = 13; // LED connected to digital pin 13 int inPin = 7; // pushbutton connected to digital pin 7 int val = 0; // variable to store the read value void setup() { pinMode(ledPin, OUTPUT); // sets the digital pin 13 as output } void loop() { val = digitalRead(inPin); // read the input pin } Adapt the following to write the digital read value over serial, and then use a jumper lead to change the input from 5V to GND to simulate a digital input. Read from Analogue Port Connect an analogue input to an analogue input, for example a variable resistor could be connected using jumper wires as shown here: The analogue value can then be obtained. Investigate averaging/filtering the result to reduce any noise. sensorPin =A0 int sensorValue = 0; // variable to store the value coming from the sensor void setup() { Serial.begin(9600); } void loop() { sensorValue = analogRead(sensorPin); Serial.println(sensorValue); } Motor Control Once your electrical team are satisfied that they have correctly wired up the motor controller, you can start programming the motor controls. You will need to find out from your electrical/mechanical teams which motor port corresponds to which motor. Using the documentation and tutorials you can control the motors. In particular look at the section at 'DC Motors' and install the relevant libraries. You can investigate the correct motor speeds to be used. You could consider writing functions to accelerate/deaccelerate up to a given speed. Develop functions for motor control which may come in useful - for example turning. Communicate with your mechanical team as how the robot should best turn, what are the intended motor actions for turning? Interfacing to Python If you would like to do some more complicated progressing on the Arduino, for example where the Arduino is acting as slave device to a computer acting as a master, serial communication between the microcontroller and a PC can be used. Python can then be used to read/write serial commands, communicating with the Arduino, while allowing more complex processing to be performed offline. Information about how to interface between an Arduino and a PC using Python can be found here: Provides introduction to interfacing to an Arduino using Python Provides some alternative methods of using Python to interface with an Arduino Things to consider when developing your software: Do you need a switch/interface to start your robot/reset? How will you interface to the electronics? What processing should be performed in electronics/software? This is a question for both the electrical and software team. How can you test the software?","title":"Software: Getting Started"},{"location":"resources/#mechanics-getting-started","text":"The introduction mechanical presentation can be found here . Advice on CAD for laser cutting Department Rapid Prototyping Facilities Information on the rapid prototyping facilities available in the department can be found here: Laser Cutting 3D Printing Plasma Cutter The laser cutter may be busy - there are training sessions daily at 12-13 and 14-15; these times should be avoided. The laser cutter should only not be used out of hours and particular care should be taken when cardboard is cut, as this is easily flammable. Things to consider when developing your software: * What pins/how will you be interfacing with the electronics sensors?","title":"Mechanics: Getting Started"}]}